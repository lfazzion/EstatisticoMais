rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regras para a coleção de usuários
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == userId;
      allow delete: if false;

      // Restringe os campos que podem ser lidos
      function isAllowedField() {
        let allowedFields = ['userType', 'name', 'approvalStatus'];
        return request.query.select([]).hasOnly(allowedFields);
      }
      allow get: if request.auth != null && isAllowedField();
      allow list: if request.auth != null && isAllowedField();
    }
    // Regras para a coleção de resultados
    match /results/{resultId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if false;
    }
    // Regras para a coleção de exercícios
    match /exercises/{exerciseId} {
      allow read: if request.auth != null;
      allow create: if isProfessor(request.auth.uid);
      allow update, delete: if isExerciseOwner(request.auth.uid, resource);
    }

    function isProfessor(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'Professor' &&
             get(/databases/$(database)/documents/users/$(userId)).data.approvalStatus == 'aprovado';
    }

    function isExerciseOwner(userId, resource) {
      return isProfessor(userId) && resource.data.createdBy == userId;
    }
  }
}